@page "/playlist"
@inject ApplicationDbContext DbContext
@inject SpotifyAPITopTracks.Services.SpotifyService SpotifyService
@using SpotifyAPITopTracks.Models

<div class="container my-5">
    <div class="text-center mb-5">
        <h1 class="display-5 text-light fw-bold">Top 50 Most-Streamed Songs</h1>
        <p class="lead text-muted">Erlebe die meistgehörten Songs im authentischen Spotify-Stil!</p>
    </div>

    @if (playlistData == null)
    {
        <!-- Skeleton Loader -->
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @for (int i = 0; i < 6; i++) 
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0 rounded-3 bg-dark skeleton-card">
                        <div class="card-body p-4">
                            <h5 class="skeleton-title"></h5>
                            <p class="skeleton-subtitle"></p>
                            <p class="skeleton-text"></p>
                        </div>
                        <div class="card-footer bg-dark"></div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <!-- Cards mit echten Daten -->
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var track in playlistData)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0 rounded-3 track-card bg-dark text-light">
                        @if (!string.IsNullOrEmpty(track.AlbumCoverUrl))
                        {
                            <img src="@track.AlbumCoverUrl" class="card-img-top" alt="Album Cover" style="height: 180px; object-fit: cover;">
                        }
                        else
                        {
                            <!-- Skeleton-Bild anzeigen, solange AlbumCoverUrl noch geladen wird -->
                            <div class="skeleton-cover" style="height: 180px;"></div>
                        }
                        <div class="card-body p-4">
                            <h5 class="card-title text-success">@track.Rank. @track.TrackName</h5>
                            <h6 class="card-subtitle text-muted mb-2">by @track.ArtistNames</h6>
                            <p class="card-text">
                                <span class="text-white-50">Streams:</span> <strong>@track.Streams.ToString("N0")</strong>
                            </p>
                        </div>
                        <div class="card-footer bg-success text-white text-center">
                            <small>Position @track.Rank in den Charts</small>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private IEnumerable<Track> playlistData;

    protected override async Task OnInitializedAsync()
    {
        playlistData = DbContext.Tracks
                        .OrderBy(track => track.Rank)
                        .Take(50)
                        .ToList();

        // Album-Cover abrufen und zu jedem Track hinzufügen
        foreach (var track in playlistData)
        {
            track.AlbumCoverUrl = await SpotifyService.GetAlbumCoverUrl(track.TrackName, track.ArtistNames);
        }
    }
}
